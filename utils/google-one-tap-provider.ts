import Credentials from 'next-auth/providers/credentials';
import { OAuth2Client } from 'google-auth-library';

type GoogleOneTapProviderOptions = {
  clientId: string;
};

const GoogleOneTapProvider = ({ clientId }: GoogleOneTapProviderOptions) => {
  const googleAuthClient = new OAuth2Client(clientId);
  return Credentials<{ credential: { type: 'text' } }>({
    // The id of this credential provider. It's important to give an id because, in frontend we don't want to
    // show anything about this provider in a normal login flow
    id: 'googleonetap',
    // A readable name
    name: 'google-one-tap',

    // This field define what parameter we expect from the FE and what's its name. In this case "credential"
    // This field will contain the token generated by google
    credentials: {
      credential: { type: 'text' },
    },
    // This where all the logic goes
    authorize: async (credentials) => {
      // The token given by google and provided from the frontend
      const token = credentials!.credential;
      // We use the google library to exchange the token with some information about the user
      const ticket = await googleAuthClient.verifyIdToken({
        // The token received from the interface
        idToken: token,
        // This is the google ID of your application
        audience: process.env.NEXT_PUBLIC_GOOGLE_ID,
      });
      const payload = ticket.getPayload()!; // This is the user

      if (!payload) {
        throw new Error('Cannot extract payload from signin token');
      }

      // Check out the jwt https://next-auth.js.org/configuration/callbacks#jwt-callback
      // and session https://next-auth.js.org/configuration/callbacks#session-callback callbacks
      // to see how to store the user in the session.
      // We return the retrieved user
      return {
        id: payload.sub,
        name: payload.name,
        email: payload.email,
        image: payload.picture,
      };
    },
  });
};

export default GoogleOneTapProvider;
