// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum ExerciseMuscleGroup {
  shoulders
  chest
  forearms
  obliques
  quads
  cardio
  biceps
  abs
  adductors
  traps
  triceps
  abductors
  hamstrings
  calves
  lats
  glutes
  lower_back
}

enum ExerciseType {
  weighted
  assisted
  rep_based
  timed
}

model User {
  id               String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId           String            @unique
  exercises        Exercise[]
  workout          Workout?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @default(now())
  finishedWorkouts FinishedWorkout[]
  scheduleDays     ScheduleDay[]
}

model Exercise {
  id                    String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                String
  user                  User                      @relation(fields: [userId], references: [userId])
  name                  String
  primaryMuscleGroup    ExerciseMuscleGroup
  secondaryMuscleGroups ExerciseMuscleGroup[]
  exerciseType          ExerciseType
  createdAt             DateTime                  @default(now())
  updatedAt             DateTime                  @default(now())
  activeInstances       WorkoutExercise[]
  finishedInstances     FinishedWorkoutExercise[]
  inScheduledDays       ExerciseInSchedule[]

  @@unique([userId, name(sort: Asc)])
}

model ScheduleDay {
  id          String               @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  nickname    String
  exercises   ExerciseInSchedule[]
  userId      String
  user        User                 @relation(fields: [userId], references: [userId])
  orderNumber Int
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @default(now())

  @@unique([userId, orderNumber])
}

model ExerciseInSchedule {
  exercise               Exercise    @relation(fields: [exerciseId], references: [id])
  exerciseId             String      @db.Uuid
  scheduleDay            ScheduleDay @relation(fields: [scheduleDayUser, scheduleDayOrderNumber], references: [userId, orderNumber], onDelete: Cascade)
  scheduleDayUser        String
  scheduleDayOrderNumber Int
  orderNumber            Int
  setCount               Int
  timePerSetInSeconds    Int?
  recommendedRepetitions Int?

  @@id([scheduleDayUser, scheduleDayOrderNumber, orderNumber])
}

model Workout {
  userId    String            @id
  user      User              @relation(fields: [userId], references: [userId])
  dayNumber Int
  nickname  String
  checkins  WorkoutCheckin[]
  exercises WorkoutExercise[]
  createdAt DateTime          @default(now())
  updatedAt DateTime          @default(now())
}

model WorkoutExercise {
  exerciseType       ExerciseType
  primaryMuscleGroup ExerciseMuscleGroup
  sets               WorkoutExerciseSet[]
  orderNumber        Int
  workoutUserId      String
  workout            Workout              @relation(fields: [workoutUserId], references: [userId], onDelete: Cascade)
  exerciseId         String               @db.Uuid
  exercise           Exercise             @relation(fields: [exerciseId], references: [id])

  @@id([workoutUserId, orderNumber])
}

model WorkoutExerciseSet {
  workoutExerciseUserId      String
  workoutExerciseOrderNumber Int
  workoutExercise            WorkoutExercise @relation(fields: [workoutExerciseUserId, workoutExerciseOrderNumber], references: [workoutUserId, orderNumber], onDelete: Cascade)
  resistanceInPounds         Int?
  repetitions                Int?
  timeInSeconds              Int?
  complete                   Boolean
  orderNumber                Int

  @@id([workoutExerciseUserId, workoutExerciseOrderNumber, orderNumber])
}

model WorkoutCheckin {
  at            DateTime @id @default(now())
  workoutUserId String
  workout       Workout  @relation(fields: [workoutUserId], references: [userId], onDelete: Cascade)

  @@index([at(sort: Asc)])
}

model FinishedWorkout {
  id                String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String
  user              User                      @relation(fields: [userId], references: [userId])
  dayNumber         Int
  endedAt           DateTime                  @unique
  nickname          String
  durationInSeconds Int
  exercises         FinishedWorkoutExercise[]
  createdAt         DateTime                  @unique @default(now())

  @@index([createdAt(sort: Desc)])
}

model FinishedWorkoutExercise {
  id                 String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finishedWorkoutId  String                       @db.Uuid
  finishedWorkout    FinishedWorkout              @relation(fields: [finishedWorkoutId], references: [id], onDelete: Cascade)
  name               String
  exerciseType       ExerciseType
  primaryMuscleGroup ExerciseMuscleGroup
  orderNumber        Int
  sets               FinishedWorkoutExerciseSet[]
  exercise           Exercise?                    @relation(fields: [exerciseId], references: [id])
  exerciseId         String?                      @db.Uuid
}

model FinishedWorkoutExerciseSet {
  id                        String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finishedWorkoutExerciseId String                  @db.Uuid
  finishedWorkoutExercise   FinishedWorkoutExercise @relation(fields: [finishedWorkoutExerciseId], references: [id], onDelete: Cascade)
  resistanceInPounds        Int?
  repetitions               Int?
  timeInSeconds             Int?
  orderNumber               Int
}
