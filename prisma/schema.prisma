// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "interactiveTransactions"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

enum ExerciseMuscleGroup {
  shoulders
  chest
  forearms
  obliques
  quads
  cardio
  biceps
  abs
  adductors
  traps
  triceps
  abductors
  hamstrings
  calves
  lats
  glutes
  lower_back
}

enum ExerciseType {
  weighted
  assisted
  rep_based
  timed
}

model User {
  userId    String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  /// All exercises defined for the user. Autogenerated list when user is created.
  exercises        Exercise[]
  /// Active workout
  workout          ActiveWorkout?
  // user's completed workouts
  finishedWorkouts FinishedWorkout[]
  /// days of the user's workout schedule
  scheduleDays     ScheduledWorkout[]

  settings Setting[]
}

model Setting {
  userId  String @db.Uuid
  key     String
  setting Json

  /// user who owns this setting
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@id([userId, key])
}

/// Represents an exercise and its attributes.
model Exercise {
  id                            String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId                        String                @db.Uuid
  createdAt                     DateTime              @default(now())
  updatedAt                     DateTime              @default(now())
  name                          String
  primaryMuscleGroup            ExerciseMuscleGroup
  secondaryMuscleGroups         ExerciseMuscleGroup[]
  exerciseType                  ExerciseType
  setCount                      Int
  minimumRecommendedRepetitions Int?
  maximumRecommendedRepetitions Int?
  timePerSetInSeconds           Int?

  /// user who owns this exercise
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  /// any instances of this exercise that are a part of a user's current active workout
  activeInstances ActiveWorkoutExercise[]

  /// any instances of this exercise that are a part of a user's previous workouts
  finishedInstances FinishedWorkoutExercise[]

  /// any instances of this exercise that are a part of a user's scheduled workouts
  scheduledInstances ScheduledWorkoutExercise[]

  @@unique([userId, name(sort: Asc)])
}

/// represents a scheduled workout in a user's plan. Has a nickname and an order number
model ScheduledWorkout {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @db.Uuid
  nickname    String
  orderNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  /// user who own this scheduled workout
  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  /// exercises that are a part of this workout
  exercises ScheduledWorkoutExercise[]

  @@unique([userId, orderNumber])
}

/// represents an exercise that's a part of a scheduled workout in a user's plan.
model ScheduledWorkoutExercise {
  exerciseId                  String @db.Uuid
  scheduledWorkoutUserId      String @db.Uuid
  scheduledWorkoutOrderNumber Int
  orderNumber                 Int

  exercise         Exercise         @relation(fields: [exerciseId], references: [id])
  scheduledWorkout ScheduledWorkout @relation(fields: [scheduledWorkoutUserId, scheduledWorkoutOrderNumber], references: [userId, orderNumber], onDelete: Cascade)

  @@id([scheduledWorkoutUserId, scheduledWorkoutOrderNumber, orderNumber])
}

/// represents a user's single active workout.
model ActiveWorkout {
  userId    String   @id @db.Uuid
  nickname  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  /// order number from the scheduled days. Saved to the FinishedWorkout, used to determine next workout day
  orderNumber Int

  user User @relation(fields: [userId], references: [userId], onDelete: Cascade)

  exercises ActiveWorkoutExercise[]
  checkins  ActiveWorkoutCheckin[]
}

/// represents an exercise that's a part of a user's active workout
model ActiveWorkoutExercise {
  userId      String @db.Uuid
  orderNumber Int
  exerciseId  String @db.Uuid

  activeWorkout ActiveWorkout @relation(fields: [userId], references: [userId], onDelete: Cascade)
  exercise      Exercise      @relation(fields: [exerciseId], references: [id])

  sets ActiveWorkoutExerciseSet[]

  @@id([userId, orderNumber])
}

model ActiveWorkoutExerciseSet {
  workoutExerciseUserId      String  @db.Uuid
  workoutExerciseOrderNumber Int
  resistanceInPounds         Int?
  repetitions                Int?
  timeInSeconds              Int?
  complete                   Boolean
  orderNumber                Int

  activeWorkoutExercise ActiveWorkoutExercise @relation(fields: [workoutExerciseUserId, workoutExerciseOrderNumber], references: [userId, orderNumber], onDelete: Cascade)

  @@id([workoutExerciseUserId, workoutExerciseOrderNumber, orderNumber])
}

model ActiveWorkoutCheckin {
  at            DateTime @id @default(now())
  workoutUserId String   @db.Uuid

  workout ActiveWorkout @relation(fields: [workoutUserId], references: [userId], onDelete: Cascade)

  @@index([at(sort: Asc)])
}

model FinishedWorkout {
  id                String                    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId            String                    @db.Uuid
  user              User                      @relation(fields: [userId], references: [userId], onDelete: Cascade)
  orderNumber       Int
  endedAt           DateTime                  @unique @default(now())
  nickname          String
  durationInSeconds Int
  exercises         FinishedWorkoutExercise[]
  startedAt         DateTime                  @unique

  @@index([startedAt(sort: Desc)])
}

model FinishedWorkoutExercise {
  id                 String                       @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finishedWorkoutId  String                       @db.Uuid
  finishedWorkout    FinishedWorkout              @relation(fields: [finishedWorkoutId], references: [id], onDelete: Cascade)
  name               String
  exerciseType       ExerciseType
  primaryMuscleGroup ExerciseMuscleGroup
  orderNumber        Int
  sets               FinishedWorkoutExerciseSet[]
  exercise           Exercise?                    @relation(fields: [exerciseId], references: [id])
  exerciseId         String?                      @db.Uuid
}

model FinishedWorkoutExerciseSet {
  id                        String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  finishedWorkoutExerciseId String                  @db.Uuid
  finishedWorkoutExercise   FinishedWorkoutExercise @relation(fields: [finishedWorkoutExerciseId], references: [id], onDelete: Cascade)
  resistanceInPounds        Int?
  repetitions               Int?
  timeInSeconds             Int?
  orderNumber               Int
}
